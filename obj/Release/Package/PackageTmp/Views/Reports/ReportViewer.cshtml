@model IOAS.Models.SqlReportModel
@using System.Data;
@{
    ViewBag.Title = "Report Viewer";
    Layout = "~/Views/Shared/_LayoutFluid.cshtml";
}


<aside class="right-side sidebar-offcanvas">

    @using (Html.BeginForm("ReportViewer", "Reports", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        @Html.ValidationSummary(true, "Please correct the errors and try again.", new { @class = "alert alert-block alert-error" })
        @Html.AntiForgeryToken()
        <fieldset>
            <section class="content">
                <div class="row">
                    <div class="col-md-12">
                        <div class="page-wrapper">
                            <div class="white-bg">
                                <div class="row">
                                    <div class="col-md-5">
                                        <div class="form-group custom-form-group">
                                            <label>
                                                Report Name
                                            </label>
                                            @Html.DropDownListFor(m => m.ReportID, new SelectList(ViewBag.Reports, "ReportID", "ReportName", ViewBag.TableRef), "--- Select ---", new { @class = "required form-control" })
                                            @Html.ValidationMessageFor(m => m.ReportID)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="page-wrapper">
                            <div class="white-bg">
                                <div class="row" id="searchbox">

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="page-wrapper">
                            <div class="white-bg">
                                <div class="custom-jsgrid-normal">
                                    <div id="reportGrid"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </section>

        </fieldset>


    }


</aside> <!-- right pane -->


<script type="text/javascript" language="javascript">

    $("#ReportID").change(function () {
        SelectedTablesChanged();
    });

    function SelectedTablesChanged() {
        var token = $("input[name=__RequestVerificationToken]").val();
        var searchdata = { "__RequestVerificationToken": token };
        var headers = {
            contentType: 'application/x-www-form-urlencoded'
        }
        headers['__RequestVerificationToken'] = token;

        var reportId = $('#ReportID option:selected').val();
        searchdata.ReportId = reportId;
        $.ajax({
            url: '@Url.Action("getReportDetails", "Reports")',
            type: "POST",
            headers: headers,
            data: searchdata,
            success: function (response) {
                var data = response.result;
                var schema = response.schema;
                var filters = response.filters;
                $("#searchbox").html("");
                var fields = [];
                var filterFields = schema.dtFilterFields;
                if (filterFields && filterFields.length > 0) {
                    var searchData = {};
                    for(var i = 0; i < filterFields.length; i++) {
                        var key = filterFields[i].ReportField;
                        var formClass = '<div class="form-group custom-form-group">';
                        var formClassEnd = '</div>';
                        var label = "";
                        
                        label = '<label>' + key + '</label>'
                        if (filterFields[i].FieldType == 'Dropdown') {                            
                            $("#searchbox").append('<div class="col-md-5" >' + formClass + label + '<select id="ddl-' + key + '" name="' + key + '" class="form-control"></select></div>' + formClassEnd); //add select box
                            $("#ddl-" + key).append($('<option/>', {
                                value: -1,
                                text: "--- Select ---"
                            }));
                            $.each(filters[key], function (index, itemData) {
                                $("#ddl-"+key).append($('<option/>', {
                                    value: itemData[key],
                                    text: itemData[key]
                                }));
                            });
                            //$("#ddl-" + key).change(function () {
                            //    searchData[this.name] = $(this).val();
                            //    $("#reportGrid").jsGrid("loadData", searchData);
                            //});
                        } else {
                            $("#searchbox").append('<div class="col-md-5 " >' + formClass + label + '<input class="form-control" type="text" id="txt' + key + '" name="'+key+'"/></div>' + formClassEnd); //add input box
                            //$("#txt" + key).change(function () {
                            //    searchData[this.name] = $(this).val();
                            //    $("#reportGrid").jsGrid("loadData", searchData);
                            //});
                        }

                    }

                }
                $("#searchbox").append('<div class="col-md-12  text-center" >' + formClass + '<a href="javascript: void (0)" id="butSearch" role="button" class="btn btn-default  btn-md" onclick="searchGrid()">Search<a/></div>' + formClassEnd); //add search button
                if (data && data.length > 0) {

                    var obj = data[0];
                    Object.keys(obj).forEach(function (key) {
                        fields.push({ name: key, type: "text", width: "50" });
                    });
                }
                createGrid(fields, data);
            },
            error: function (err) {
                alert(err);
            }
        });
    }

    function searchGrid() {
        var searchData = {};
        var dropdowns = $("[id^=ddl-]");
        for (var i = 0; i < dropdowns.length; i++) {
            var id = dropdowns[i].id;
            if ($("#" + id).val() != -1) {
                searchData[dropdowns[i].name] = $("#" + id).val();
            }
        }

        var txtBoxes = $("[id^=txt]");
        for (var i = 0; i < txtBoxes.length; i++) {
            var id = txtBoxes[i].id;
            if ($("#" + id).val() != -1 && $("#" + id).val() != "") {
                searchData[txtBoxes[i].name] = "like '%"+ $("#" + id).val() +"%'";
            }
        }
        if (searchData && Object.keys(searchData).length > 0) {
            $("#reportGrid").jsGrid("loadData", searchData);
        }
       
    }
    function createGrid(fields, reportJson) {
        var db = (function () {
            return {
                data: reportJson,
                loadData: function (filter) {
                    var condition = "";
                    if (filter) {
                        Object.keys(filter).forEach(function (key) {
                            if (filter[key] && condition === "" && filter[key].indexOf("like ") > -1) {
                                condition = key + ' ' + filter[key]
                            } else if (filter[key] && condition !== "" && filter[key].indexOf("like ") > -1) {
                                condition += " and " + key + ' ' + filter[key]                                
                            } else if (filter[key] && condition === "") {
                                condition = isNaN(filter[key]) ? key + " = '" + filter[key] + "'" : key + " = " + filter[key];
                            } else if (filter[key] && condition !== "") {
                                var temp = isNaN(filter[key]) ? key + " = '" + filter[key] + "'" : key + " = " + filter[key]
                                condition += " and " + temp;
                            }
                        });
                    }
                    var data = $.Deferred();
                    var token = $("input[name=__RequestVerificationToken]").val();
                    var searchdata = { "__RequestVerificationToken": token };
                    var headers = {
                        contentType: 'application/x-www-form-urlencoded'
                    }
                    headers['__RequestVerificationToken'] = token;
                    var reportId = $('#ReportID option:selected').val();
                    searchdata.ReportId = reportId;
                    searchdata.condition = condition;
                    $.ajax({
                        type: "POST",
                        //contentType: "application/json; charset=utf-8",
                        url: '@Url.Action("searchReportDetails", "Reports")',
                        dataType: "json",
                        headers: headers,
                        data: searchdata,
                    }).done(function (resultData) {
                        var response = resultData.result;
                        data.resolve(response);
                    });
                    return data.promise();
                }
            };
        }());

        $("#reportGrid").jsGrid({
            width: "100%",
            height: "auto",
            filtering: false,
            inserting: false,
            editing: false,
            sorting: true,
            paging: true,
            autoload: true,
            pageIndex: 1,
            pageSize: 10,
            pageButtonCount: 10,
            pagerFormat: "Pages: {first} {prev} {pages} {next} {last}    {pageIndex} of {pageCount}",
            pagePrevText: "Prev",
            pageNextText: "Next",
            pageFirstText: "First",
            pageLastText: "Last",
            pageNavigatorNextText: "...",
            pageNavigatorPrevText: "...",
            //data: reportJson,
            controller: db,
            deleteButton: true,
            fields: fields
        });

    }


</script>